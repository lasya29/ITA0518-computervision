import numpy as np
import cv2

def find_homography(src_points, dst_points):
    # Convert points to homogeneous coordinates
    src_points = np.hstack((src_points, np.ones((src_points.shape[0], 1))))
    dst_points = np.hstack((dst_points, np.ones((dst_points.shape[0], 1))))
    
    # Create the A matrix
    A = np.zeros((2 * len(src_points), 9))
    for i in range(len(src_points)):
        x, y, z = src_points[i]
        u, v, w = dst_points[i]
        A[2 * i] = [-x, -y, -1, 0, 0, 0, u*x, u*y, u]
        A[2 * i + 1] = [0, 0, 0, -x, -y, -1, v*x, v*y, v]

    # Solve for the homography matrix using Singular Value Decomposition (SVD)
    _, _, V = np.linalg.svd(A)
    H = V[-1].reshape(3, 3)

    return H / H[2, 2]

def main():
    # Load images
    img1 = cv2.imread("C:/Users/konda/OneDrive/Pictures/Saved Pictures/42136.jpg")
    img2 = cv2.imread("C:/Users/konda/OneDrive/Pictures/Saved Pictures/41609.jpg")

    # Define corresponding points manually
    src_points = np.array([[100, 100], [200, 100], [200, 200], [100, 200]])
    dst_points = np.array([[200, 200], [300, 200], [300, 300], [200, 300]])

    # Find homography matrix
    H = find_homography(src_points, dst_points)

    # Apply perspective transformation
    transformed_img = cv2.warpPerspective(img1, H, (img2.shape[1], img2.shape[0]))

    # Display the result
    cv2.imshow('Transformed Image', transformed_img)
    cv2.waitKey(0)
    cv2.destroyAllWindows()

if _name_ == "_main_":
    main()
