import cv2
import numpy as np

# Load the video
cap = cv2.VideoCapture("C:/huzurabad/03.mp4")

# Check if the video is opened successfully
if not cap.isOpened():
    print("Error: Couldn't open video.")
    exit()

# Define the corners of the original video frame
original_pts = np.float32([[0, 0], [cap.get(cv2.CAP_PROP_FRAME_WIDTH), 0],
                           [0, cap.get(cv2.CAP_PROP_FRAME_HEIGHT)],
                           [cap.get(cv2.CAP_PROP_FRAME_WIDTH), cap.get(cv2.CAP_PROP_FRAME_HEIGHT)]])

# Define the corners of the transformed video frame
# You need to specify these points manually or use some techniques to detect them automatically
# For demonstration purposes, we'll create a perspective where the video appears tilted
tilted_pts = np.float32([[100, 200], [400, 50], [50, 500], [400, 400]])

# Compute the perspective transformation matrix
perspective_matrix = cv2.getPerspectiveTransform(original_pts, tilted_pts)

# Loop through the video frames
while True:
    ret, frame = cap.read()

    if not ret:
        break  # Break the loop if no frame is retrieved

    # Perform the perspective transformation
    result = cv2.warpPerspective(frame, perspective_matrix, (int(cap.get(cv2.CAP_PROP_FRAME_WIDTH)),
                                                             int(cap.get(cv2.CAP_PROP_FRAME_HEIGHT))))

    # Display the transformed frame
    cv2.imshow('Perspective Transformed Video', result)

    # Break the loop if 'q' is pressed
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

# Release the video capture object and close the OpenCV windows
cap.release()
cv2.destroyAllWindows()
